===========================================================
Задача 1
Что выведет код и почему?
===========================================================
package main

import "fmt"

func main() {
	a := []int{10, 20, 30, 40}
	b := make([]*int, len(a))
	for i, v := range a {
		b[i] = &v
	}
	fmt.Println(*b[0], *b[1])
}

===========================================================
Задача 2
Что выведет код и почему?
===========================================================
package main

import (
	"fmt"
	"runtime"
)

func main() {
	runtime.GOMAXPROCS(1)
	ch := 0
	go func() {
		ch = 1
	}()
	for ch == 0 {
	}
	fmt.Println("finish")
}

===========================================================
Задача 3
Что выведет код и почему?
===========================================================
func main() {
	foo := make([]int, 0, 4)
	foo = append(foo, 1, 2, 3)
	bar := append(foo, 4)
	baz := append(foo, 5)

	fmt.Println(bar)
	fmt.Println(baz)
}

===========================================================
Задача 4
Что выведет код и почему?
===========================================================
package main

import "fmt"

type MyError struct{}

func (MyError) Error() string {
	return "MyError!"
}

func errorHandler(err error) {
	if err != nil {
		fmt.Println("Error:", err)
	}
}

func main() {
	var err *MyError
	errorHandler(err)
	err = &MyError{}
	errorHandler(err)
}

===========================================================
Задача 5
===========================================================
// Для структуры
type SafeMap struct {
	data map[string]string
}

// напишите потокобезопасный метод GetOrCreate(key, value string) string.
// Количество чтений на несколько порядков превышает количество вставок.
// Метод возвращает значение, которое уже есть в data или создает новое, если ключ не обнаружен

===========================================================
Задача 6
===========================================================

// Напишите тело функции
func merge(list1, list2 []int) []int {
    // list1, list2 остортированы по возрастанию
    // результат тоже должен быть отсортирован по возрастанию
}
