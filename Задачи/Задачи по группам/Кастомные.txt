Кастом

==========================================
Задача 1
1. Написать функцию, которая принимает число N и возвращает слайс размера N с уникальными числами.
2. Идеи как тестировать функцию?
==========================================

===========================================================
Задача 2
1. Нужно написать функцию генератор паролей, которая принимает целое число n, а на выходе строка длины n из букв a-zA-Z и 0-9
2. Что тут можно улучшить?
3. Какие тесты ты бы написал для нее? Есть какая-нибудь возможность угадать, какая строка будет генерироваться, чтобы писать тесты?
===========================================================

===========================================================
Задача 3
Написать функцию, которая устанавливает i-ый бит числа в 0
===========================================================

===========================================================
Задача 4
===========================================================

package main
 
type Data struct {
    ID int
    Payload map[string]interface{}
}
 
type Reader interface{
    Read() []*Data
}
 
type Processor interface{
    Process(Data) ([]*Data, error)
}
 
type Writer interface{
    Write([]*Data)
}
 
type Manager interface{
    Manage() // blocking
}
 
// Необходимо имплементировать интерфейс Manager так, чтобы Manager мог принимать данные из одного Reader
// обрабатывать полученные данные на каждом из списка Processor и результирующие данные передавать в Writer.
// При возникновении ошибки при обработке, прочитанные из Reader данные необходимо пропустить.

===========================================================
Задача 5
1. Релизовать ручку так, чтобы она выполнялась быстрее чем за одну секунду
2. Теперь допустим, что запрашивается температура в каком-то location_id. Опиши, как это реализовать. 
===========================================================

// Есть функция getWeather, которая через нейронную сеть вычисляет температуру за ~1 секунду
// Есть highload ручка /weather/highload с нагрузкой 3k RPS
// Необходимо реализовать код этой ручки

func getWeather() int {
    time.Sleep(1 * time.Second)
    return rand.Intn(70) - 30
}

func main() {
    http.HandleFunc("/weather/highload", func(resp http.ResponseWriter, req *http.Request) {


    })
}

===========================================================
Задача 6
1. Реализовать кеш. Для простоты считаем, что у нас бесконечная память и нам не нужно задумываться об удалении ключей из него.
	1. Почему использовал RWMutex, а не Mutex?
2. Теперь представим что память не бесконечная. С какими проблемами столкнемся и как их решить?
	1. Какие есть алгоритмы выселения?
3. Реализуй LRU
===========================================================

// In-memory cache
// Нужно написать простую библиотеку in-memory cache.
// Реализация должна удовлетворять интерфейсу:

type Cache interface {
    Set(k, v string)
    Get(k string) (v string, ok bool)
}
