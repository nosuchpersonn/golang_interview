

==============================
    Мапа
==============================
Часто
-------------
    - Что такое мапа?

Средне
-------------
    - Что произойдет при конкуррентной записи в мапу? 
    - Как устроена мапа под капотом?
    - Какие ключи могут быть у мапы?
    - Какая сложность работы с мапой?
    - Можно ли взять адрес элемента мапы и почему?
    - Как работает эвакуация данных?

Редко
-------------
    - Как разрешаются коллизии в мапе?
    - Как сделать конкурентную запись в мапу?
    - Как достигается константная сложность работы с мапой?
    - В функции make для мапы мы указываем число. Что оно дает?
    - Для чего используется мапа?
    - Мапа потокобезопасная?
    - Пробовали из разных потоков писать в мапу?
    - Стало слишком много коллизий в мапе, как решить проблему?
    - Какая сложность работы с мапой в худшем случае?
    - Что произойдет при конкуррентном чтении из мапы?
    - Чем мапа отличается от sync.Map?


==============================
    Массивы/Слайсы
==============================
Часто
-------------
    - Что такое слайс?
    - Чем массив отличается от слайса?

Средне
-------------
    - Как работает append?

Редко
-------------
    - Как правильно/неправильно работать со слайсом?
    - Для чего можно использовать массивы в Golang?
    - До какого размера можно увеличивать слайс?
    - Допустима ли конкуррентная работа со слайсом?
    - Для чего используются слайсы?
    - Берем от слайса слайс, куда будет указывать его указатель?
    - В чем разница между слайсом указателей и слайсом значений с точки зрения вызова функции?
    - Где в памяти размещается массив, а где слайс?
    - Какие методы оптимизации работы со слайсами ты бы применил в работе?
    - Какие есть ограничения при работе со слайсом?
    - Какие есть средства для добавления элементов в слайс?
    - Какая есть функции для создания слайса с длиной отличной от нуля?
    - С какой скоростью идет поиск в массиве и почему?
    - Чем хорош массив по сравнению со слайсом?
    - Что такое массив?


==============================
    Каналы
==============================
Часто
-------------
    - Что такое каналы?

Средне
-------------
    - Как устроен канал и как он работает под капотом?
    - Какие есть типы каналов в Golang?
    - Что если писать/читать в закрытый канал?

Редко
-------------
    - Что будет при записи в закрытый канал?
    - Чем отличается запись/чтение в буферизованном и небуферизованном канале?
    - Что произойдет с читателями/писателями если закрыть канал?
    - Что если закрыть закрытый канал?
    - Что используется для неблокирующего чтения из канала?
    - Какие операции есть с каналами?
    - Какие параметры могут иметь каналы?
    - Для чего используется select при работе с каналами?
    - Как проверить, что канал закрыт?
    - Как сделать канал буферизованным?
    - Есть две горутины, одна пишет в небуферизованный, а другая в буферизованный канал, оба не читаются. Что произойдет?


==============================
    Примитивы синхронизации
==============================
Часто
-------------
    - Какие примитивы синхронизации есть в Golang?

Средне
-------------
    - Чем мьютекс отличается от семафора?

Редко
-------------
    - Чем мьютексы отличаются от атомиков?
    - Что из пакета sync используешь на практике?
    - Что можно использовать для ожидания выполнения N горутин?
    - Какие примитивы синхронизации использовал в работе и для чего?
    - Как устроена WaitGroup под капотом и как ее можно реализовать самому?
    - Сколько нужно ядер, чтобы начать использовать sync.Map?
    - Расскажи про sync.Map
    - Расскажи про пакет sync
    - Когда нужно использовать Mutex, а когда RWMutex?
    - Есть общий ресурс. Хотим, чтобы к нему одновременно обращались только N горутин. Как это сделать?
    - Запустим 1000 горутин с инкрементом инта. Получим в конце тысячу? Что делать, чтобы получить тысячу?
    - Есть глобальная мапа, глобальный мьютекс. Две функции. Одна блочит мьютекс, а вторая нет. Что произойдет?
    - В чем разница между Mutex и RWMutex?


==============================
    Горутины
==============================
Часто
-------------
    - Что такое горутина?
    - Чем горутина отличается от треда?

Средне
-------------
    - В чем преимущества горутин над тредами?
    - Что есть в Golang для многопоточности?

Редко
-------------
    - Зачем понадобилось добавлять горутины в Golang?
    - Как можно остановить горутину?
    - Расскажите про конкуррентность и параллельность в Golang
    - Когда возникает утечка горутины?
    - Какие есть способы связи между горутинами, какие плюсы и минусы?


==============================
    Интерфейсы
==============================
Часто
-------------
    - Что такое интерфейс?

Средне
-------------
    - Как устроен интерфейс?
    - Для чего используется интерфейс?

Редко
-------------
    - Как ты используешь интерфейс в работе?
    - Как в строготипизированным языке сделать функцию, которая работает с разными типами?
    - Зачем нужен пустой интерфейс?
    - Есть интерфейс, а есть указатель на структуру, который nil. Кладем указатель в интерфейс. Что если сравнить интерфейс с nil?
    - Чем `any` отличается от пустого интерфейса?
    - Чем пустой интерфейс отличается от пустой структуры?


==============================
    Общее
==============================

Средне
-------------
    - Какие преимущества есть у Golang?

Редко
-------------
    - Какие основные компоненты библиотеки runtime знаешь?
    - Какие недостатки есть у Golang?
    - Какие фреймворки знаешь для инициализации приложения?
    - Какая сортировка используется в Golang?
    - Какая последняя версия Golang?
    - Какая кодировка используется в Golang?
    - Расскажи про разные подходы инициализации приложения и какие сам используешь?
    - Можно ли в Golang создать статический метод?
    - Расскажи про пакет reflect и как его используешь?
    - Работали с библиотекой math? Что делает math.Pow?
    - При ручном биндинге (про инициализацию приложения) сталкивался с циклической зависимостью?
    - К каким проблемам может привести использование пакета reflect?
    - Как передаются параметры в функцию, по ссылке или по значению?
    - Для чего используется функция init?
    - В чем разница в передаче получателя метода по ссылке и по значению?
    - Вы нашли багу в Golang, вы можете как-то повлиять на исходный код, внести правки, сделать мерж реквест?
    - Чем тебе понравился Golang?
    - Что добавилось интересного с последней версией Golang?
    - Язык Golang компилируемый или интерпретируемый?


==============================
    Планировщик
==============================

Средне
-------------
    - Как работает планировщик Golang?

Редко
-------------
    - Как работает вытесняющая многозадачность?
    - За счет чего достигается параллельное выполнение в Golang? 
    - В чем разница между вытесняющим и кооперативным планировщиком? 
    - В планировщике до версии 1.15 какие операции приводят к переключению контекста горутин?
    - Можно ли руками переключить контекст горутины?
    - Может ли горутина начать работу на одном P, приостановиться и продолжить работу на другом P?
    - Может ли одна очередь украсть горутины у другой?
    - Расскажи про глобальную и локальную очереди
    - Сколько потоков операционной системы мы можем создать?
    - Какой тип планировщика в Golang?
    - Какую функцию выполняет планировщик?
    - Что происходит с горутиной при ее создании?


==============================
    Контекст
==============================
Часто
-------------
    - Для чего используется контекст?

Средне
-------------
    - Что такое контекст?

Редко
-------------
    - Как работает WithCancel?
    - Как применяешь контекст в работе?
    - Как устроен контекст?
    - Какие есть виды контекстов?
    - Перекидывали логгер в контексте?


==============================
    defer
==============================
Часто
-------------
    - Что такое defer?

Средне
-------------
    - Для чего используется defer?
    - Какой порядок выполнения нескольких defer?

Редко
-------------
    - Код в defer выполняется до return или после?
    - Где инициализируется defer, в стеке или куче?


==============================
    Память
==============================

Редко
-------------
    - В одном случае ты передаешь указатель на допустим инт, а в другом случае большую структурку. Как с точки зрения рантайма и потребления ресурсов будет вести приложение?
    - Как узнать где выделяется переменная, в стеке или куче?
    - Как можно обнаружить чересчур большое выделение памяти?
    - Предположим есть рекурсивная функция. Вызывается много раз. Что может произойти?
    - Расскажи про модель памяти в Golang, про стек и про кучу
    - Какое максимальный размер значения для размещения в стеке?
    - Что такое Escape Analysis?
    - Что если при увеличении слайса полностью забьем память?
    - Что быстрее, размещение объектов в стеке или куче и почему?
    - Что такое утечка памяти?
    - Что такое стек?


==============================
    Типы данных
==============================

Средне
-------------
    - Какие типы данных есть в Golang?

Редко
-------------
    - Какой длины руна?
    - Как реализовать Enum в Golang?
    - Если нужно в строке хранить эмодзи, то как это сделать? 
    - Что если во время компиляции переполним тип? В int8 запишем  256?
    - Что происходит при переполнении числа, например в uint8 выйдем за границу на 1?


==============================
    Гонка данных
==============================

Средне
-------------
    - Что такое race condition?
    - Как обнаружить race condition?

Редко
-------------
    - Есть глобальный слайс и я в разных горутинах присваиваю ему аппенд к нему же одного элемента. Будет ли гонка?
    - Где кроме кода может встретиться race condition?
    - Какие есть способы устранения race condition?
    - Флаг -race показывает гонку на этапе компиляции или выполнения?


==============================
    Ошибки/Паника
==============================

Редко
-------------
    - Куда нужно помещать recover?
    - Какая парадигма в Golang с точки зрения обработки исключений и ошибок?
    - Какие есть функции для оборачивания и сравнения ошибок?
    - Для чего используются ошибки, а для чего паника?
    - Для чего используется паника?
    - Есть несколько деферов, в одном из них рековер. Как будет обрабатываться паника? Что если рековер расположен сильно выше и куда бы ты его поместил в случае http вызова? Есть несколько деферов и в одном из них паника, рековер нет, что будет?
    - Что используется для обработки паники?
    - Чем отличается работа с ошибками в Golang от других языков?
    - Что такое паника?


==============================
    Указатели
==============================

Средне
-------------
    - Что такое указатель?

Редко
-------------
    - Что такое ссылка на значение?
    - Чем отличается ссылка от указателя?
    - Чем чревато передавать структуру по ссылке?
    - Для чего используются указатели?
    - Для чего в практике используешь указатели?
    - Какие есть средства для работы с указателями?
    - Когда лучше использовать/не использовать указатели?


==============================
    Дженерики
==============================

Средне
-------------
    - С дженериками работали?

Редко
-------------
    - Чем кодогенерация отличается от дженериков?
    - В какой версии появились дженерики?


==============================
    Конструкции
==============================

Редко
-------------
    - Гарантирует ли порядок выполнения конструкция select-case?
    - Как выглядит конструкция утверждения типа switch?
    - Нужно ли в switch-case проставлять break?
    - Какие есть циклы в Golang?
    - Чем отличается switch от select?


==============================
    ООП
==============================

Средне
-------------
    - Как устроено ООП в Golang?
    - Как реализуется наследование в Golang?


==============================
    Сборщик мусора
==============================

Редко
-------------
    - Как приходилось работать со сборкой мусора?
    - Как работает GC, его алгоритм и когда запускается?
    - Вот выделилась память и она используется, зачем в таком случае нужен GC?
    - Для чего используется GC?
    - Какие есть рекомандации как упростить жизнь GC?
    - Можно ли как-то отключить GC или ограничить запуски?
    - Что такое GC?
    - Что такое сборка мусора?


==============================
    Строки
==============================

Средне
-------------
    - Что такое string?

Редко
-------------
    - Приходит строка в utf8, там могут быть русские символы. Как узнать есть ли там русские буквы икак узнать длину в символах?
    - Какие особенности есть у string?
    - Как работать с utf8 строкой?


==============================
    Структуры
==============================

Редко
-------------
    - Имеет ли значение порядок полей в структуре?
    - От чего зависит размер выравнивания в структуре?
    - Что такое структура?


==============================
    Пакеты
==============================

Редко
-------------
    - Что такое пакет?
    - Расскажи про папку internal
